<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>-- select OBJECT_NAME(object_id),* from sys.columns where name='ProductDescription'
-- select OBJECT_NAME(object_id),* from sys.columns where name='accounttype'
-- select OBJECT_NAME(object_id),* from sys.columns where name='hotelid'
-- select OBJECT_NAME(object_id),* from sys.columns where name='ItemCode'

--------------------------------------------------------------
-- Πωλήσεις Ειδών ανά Χειριστή/Τιμοκατάλογο/ProductCategory --
--       (περιλαμβάνει και υπολογισμό Δημοτικού Φόρου)      --
--------------------------------------------------------------
 
-- Declare @FromDate Date = '2017-01-18', @ToDate Date = '2017-01-18'

-- Select Couvers = Sum(CoverTotal), G_Total = Sum(total) From (

Select PricelistId = vpsa3.PricelistId, PricelistDescription
     , PosInfoId, PosInfoDescription
     , ProductId = vpsa3.ProductId, ProductCode, ProductDescription
     , Qty -- = Sum(Qty)
     , Total -- = Sum(InvoiceTotal) / count(InvoiceId)
     , Net = vpsa3.Net -- = Sum(Net)
     , Net2 = tax_calc.Net
     , NetNoTax
     , StaffCode, StafName
     -- , CategoryId = ISNULL( CategoryId, 0 ), CategoryDescription = ISNULL( CategoryDescription,'No Category' )
     , ProductCategoryCode, ProductCategoryDescription
     , FODay, EndOfDayId 
     , InvoiceId = vpsa3.InvoiceId

From pos_sales_analysis3 AS vpsa3
     OUTER APPLY (

               SELECT TOP 1 NetNoTax = odi.Net * (100 - CASE
                                                  WHEN odi.OrderDetailIgredientsId IS NOT NULL THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                                                                               ELSE ISNULL( pd_a.TaxPercentage, 0 )
                                                  END ) / 100
                    , TaxPercentage = CASE
                                      WHEN odi.OrderDetailIgredientsId IS NOT NULL THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                                                                   ELSE ISNULL( pd_a.TaxPercentage, 0 )
                                      END
                     --ISNULL(pd_a.TaxPercentage, pd_ing.TaxPercentage) TaxPercentage
                   , odi.ProductId
                   , odi.OrderDetailIgredientsId
                   , odi.PricelistId
                   , odi.Net
                   , InvoiceId = odi.InvoicesId
                   , Percentage = ( 100 - CASE
                                          WHEN odi.OrderDetailIgredientsId IS NOT NULL THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                                                                       ELSE ISNULL( pd_a.TaxPercentage, 0 )
                                          END )
                   -- , *

               FROM OrderDetailInvoices_View AS odi
                    LEFT OUTER JOIN (
                                    SELECT Id
                                         , IngredientId
                                    FROM OrderDetailIgredients_View
                                    ) AS oding ON odi.OrderDetailIgredientsId = oding.Id AND odi.OrderDetailIgredientsId IS NOT NULL
                    OUTER APPLY (
                                SELECT PricelistId = pd.PricelistId
                                     , ProductId = pd.ProductId
                                     , IngredientId = pd.IngredientId
                                     , TaxPercentage = tx.Percentage
                                FROM PricelistDetail AS pd
                                     LEFT OUTER JOIN Tax AS tx ON pd.TaxId = tx.Id
                                WHERE pd.PricelistId = odi.PricelistId
                                      AND CAST( pd.ProductId AS VARCHAR( 100 ) ) = CASE
                                                                                   WHEN odi.ProductId IS NULL THEN 'dfsdgfasd'
                                                                                                              ELSE CAST(odi.ProductId AS VARCHAR(100))
                                                                                   END
                                ) AS pd_a
                    OUTER APPLY (
                                SELECT PricelistId = pd.PricelistId
                                     , ProductId = pd.ProductId
                                     , IngredientId = pd.IngredientId
                                     , TaxPercentage = tx.Percentage
                                FROM PricelistDetail AS pd
                                     LEFT OUTER JOIN Tax AS tx ON pd.TaxId = tx.Id
                                WHERE pd.PricelistId = odi.PricelistId
                                      AND CAST( pd.IngredientId AS VARCHAR( 100 ) ) = CASE
                                                                                      WHEN oding.IngredientId IS NULL THEN 'dfsdgfasd'
                                                                                                                      ELSE CAST(oding.IngredientId AS VARCHAR(100))
                                                                                      END
                                ) AS pd_ing

               WHERE vpsa3.InvoiceId = odi.InvoicesId AND vpsa3.ProductId = odi.ProductId and odi.OrderDetailId = vpsa3.OrderDetailId

     ) AS tax_calc

Where IsNull( FODay, CAST( getdate() AS date ) ) BETWEEN @FromDate AND @ToDate
      -- AND ( PosInfoId = 1 )
      -- AND ( EndOfDayId = 754 )
      AND IsExtra = 0
      -- AND PosInfoDescription = 'ATRIUM'
      -- AND StafName LIKE 'ΚΙΜ%'
      -- AND ( ProductId &gt; 15 AND ProductId &lt; 18 )

/*
Group By PricelistId, PricelistDescription
       , PosInfoId, PosInfoDescription
       , StaffCode, StafName
       , ProductId, ProductCode, ProductDescription
       , CategoryId, CategoryDescription
       , FODay, EndOfDayId
       , InvoiceId
*/

-- Order By InvoiceId

-- ) as sum_of_totals</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IlBvc0luZm9zIj48RmllbGQgTmFtZT0iSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJDb2RlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlByaWNlbGlzdHMiPjxGaWVsZCBOYW1lPSJJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlByb2R1Y3RDYXRlZ29yaWVzIj48RmllbGQgTmFtZT0iQ29kZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjwvVmlldz48VmlldyBOYW1lPSJRdWVyeSI+PEZpZWxkIE5hbWU9IlByaWNlbGlzdElkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iUHJpY2VsaXN0RGVzY3JpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUG9zSW5mb0lkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iUG9zSW5mb0Rlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlByb2R1Y3RJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IlByb2R1Y3RDb2RlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlByb2R1Y3REZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJRdHkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ik5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iTmV0MiIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iTmV0Tm9UYXgiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlN0YWZmQ29kZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJTdGFmTmFtZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQcm9kdWN0Q2F0ZWdvcnlDb2RlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlByb2R1Y3RDYXRlZ29yeURlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkZPRGF5IiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iRW5kT2ZEYXlJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9Ikludm9pY2VJZCIgVHlwZT0iSW50NjQiIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlF1ZXJ5X0Zhc3RTdGFydCI+PEZpZWxkIE5hbWU9IklkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iSW52b2ljZVR5cGVJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkNvdW50ZXIiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJEYXkiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJJc1ByaW50ZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9Ikd1ZXN0SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJUb3RhbCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iRGlzY291bnQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlZhdCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iVGF4IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJOZXQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlN0YWZmSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJDb3ZlciIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IlRhYmxlSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQb3NJbmZvSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQZGFNb2R1bGVJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkNsaWVudFBvc0lkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iRW5kT2ZEYXlJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IlBvc0luZm9EZXRhaWxJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IklzVm9pZGVkIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJJc0RlbGV0ZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkRpc2NvdW50UmVtYXJrIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlBheW1lbnRzRGVzYyIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJJc1BhaWQiIFR5cGU9IkludDE2IiAvPjxGaWVsZCBOYW1lPSJQYWlkVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlJvb21zIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9Ik9yZGVyTm8iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iSXNJbnZvaWNlZCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iSGFzaGNvZGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iVGFibGVTdW0iIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlN0YWZmcyI+PEZpZWxkIE5hbWU9IlN0YWZmQ29kZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJTdGFmTmFtZSIgVHlwZT0iU3RyaW5nIiAvPjwvVmlldz48L0RhdGFTZXQ+</value>
  </data>
</root>