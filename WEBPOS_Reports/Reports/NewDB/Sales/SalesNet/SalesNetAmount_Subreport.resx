<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>-- select OBJECT_NAME(object_id),* from sys.columns where name='hotelid'
-- select OBJECT_NAME(object_id),* from sys.columns where name='ItemCode'

-----------------------------------------------------------------
-------------- Καθαρές Αξίες Πωλήσεων - SUB-REPORT --------------
-- (περιλαμβάνει υπολογισμό και αποφορολόγηση Δημοτικού Φόρου) --
-----------------------------------------------------------------

  /*
Declare @FromDate Date = '2016-10-08'
      , @ToDate Date = '2016-10-10'
      , @DepartmentId Bigint = 1
  */

SELECT Category = a.Category
     , CategoryId = a.CategoryId
     , a.DepartmentId
     , Price = 0
     , RetQty = SUM( a.RetQty )
     , RetTotal = SUM( a.RetTotal )
     , RetNet = SUM( a.RetNet )
     , CoplQty = SUM( a.CoplQty )
     , CoplTotal = SUM( a.CoplTotal )
     , CoplNet = SUM( A.CoplNet )
     , Qty = SUM( a.Qty )
     , Total = SUM( a.Total )
     , Net = SUM( a.Net )

FROM (

SELECT DepartmentId = pif.DepartmentId
     , CategoryId = ISNULL( c.Id, -1 )
     , Category = ISNULL( c.[Description], 'No Category' )
     , RetQty = CASE WHEN IsVoided &lt;&gt; 0 THEN odi.QTY ELSE 0 END
     , RetTotal = CASE WHEN IsVoided &lt;&gt; 0 THEN odi.Total ELSE 0 END
     -- , RetNet = CASE WHEN IsVoided &lt;&gt; 0 THEN odi.Net ELSE 0 END
     , RetNet = CASE WHEN IsVoided &lt;&gt; 0 THEN tax_calc.NetNoTax ELSE 0 END
     , CoplQty = CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN odi.QTY ELSE 0 END
     , CoplTotal = CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN odi.Total ELSE 0 END
     -- , CoplNet = CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN odi.Net ELSE 0 END
     , CoplNet = CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN tax_calc.NetNoTax ELSE 0 END
     , Qty = CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN odi.Qty  ELSE 0 END
     , Total = CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN odi.Total ELSE 0 END
     -- , Net = CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN odi.Net ELSE 0 END
     , Net = CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN tax_calc.NetNoTax ELSE 0 END
     , FromDate = @FromDate, ToDate = @ToDate

FROM OrderDetailInvoices odi 
     INNER JOIN Invoices i on odi.InvoicesId = i.id AND IsNull(i.IsDeleted, 0) = 0
     INNER JOIN PosInfo pif ON pif.Id = i.PosInfoId AND pif.DepartmentId = @DepartmentId
     LEFT OUTER JOIN ProductCategories pc on odi.productCategoryId = pc.Id
     LEFT OUTER JOIN Categories c ON c.Id = pc.CategoryId
     INNER JOIN EndOfDay eod on i.EndofDayId = eod.Id
                AND IsNull( CAST( CONVERT( VARCHAR( 10 ), eod.FODay, 120 ) AS DATETIME)
                          , CAST( getdate() AS DATE ) ) BETWEEN @FromDate AND @ToDate
     OUTER APPLY (
                 SELECT TOP 1 NetNoTax = odi.Net * (100 - CASE
                                                    WHEN odi.OrderDetailIgredientsId IS NOT NULL THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                                    ELSE ISNULL( pd_a.TaxPercentage, 0 )
                                                    END ) / 100
                      , TaxPercentage = CASE
                                        WHEN odi.OrderDetailIgredientsId IS NOT NULL THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                        ELSE ISNULL( pd_a.TaxPercentage, 0 )
                                        END
                       --ISNULL(pd_a.TaxPercentage, pd_ing.TaxPercentage) TaxPercentage
                     , odi.ProductId
                     , odi.OrderDetailIgredientsId
                     , odi.PricelistId
                     , odi.Net
                     , InvoiceId = odi.InvoicesId
                     , Percentage = ( 100 - CASE
                                            WHEN odi.OrderDetailIgredientsId IS NOT NULL THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                            ELSE ISNULL( pd_a.TaxPercentage, 0 )
                                            END )
                     -- , *
                 
                 FROM OrderDetailInvoices AS odi2
                      LEFT OUTER JOIN (
                                      SELECT Id
                                           , IngredientId
                                      FROM OrderDetailIgredients
                                      ) AS oding ON odi2.OrderDetailIgredientsId = oding.Id AND odi2.OrderDetailIgredientsId IS NOT NULL
                      OUTER APPLY (
                                  SELECT PricelistId = pd.PricelistId
                                       , ProductId = pd.ProductId
                                       , IngredientId = pd.IngredientId
                                       , TaxPercentage = tx.Percentage
                                  FROM PricelistDetail AS pd
                                       LEFT OUTER JOIN Tax AS tx ON pd.TaxId = tx.Id
                                  WHERE pd.PricelistId = odi2.PricelistId
                                        AND CAST( pd.ProductId AS VARCHAR( 100 ) ) = CASE
                                                                                     WHEN odi2.ProductId IS NULL THEN 'dfsdgfasd'
                                                                                     ELSE CAST(odi2.ProductId AS VARCHAR(100))
                                                                                     END
                                  ) AS pd_a
                      OUTER APPLY (
                                  SELECT PricelistId = pd.PricelistId
                                       , ProductId = pd.ProductId
                                       , IngredientId = pd.IngredientId
                                       , TaxPercentage = tx.Percentage
                                  FROM PricelistDetail AS pd
                                       LEFT OUTER JOIN Tax AS tx ON pd.TaxId = tx.Id
                                  WHERE pd.PricelistId = odi2.PricelistId
                                        AND CAST( pd.IngredientId AS VARCHAR( 100 ) ) = CASE
                                                                                        WHEN oding.IngredientId IS NULL THEN 'dfsdgfasd'
                                                                                        ELSE CAST(oding.IngredientId AS VARCHAR(100))
                                                                                        END
                                  ) AS pd_ing
                 
                 WHERE odi.InvoicesId = odi2.InvoicesId AND odi.ProductId = odi2.ProductId
                 ) AS tax_calc
           
WHERE IsNull(odi.IsDeleted, 0) = 0
      and InvoiceType not in ( 2, 3, 8, 10, 11, 12 )
      AND ( ( IsExtra = 0 ) OR ( IsExtra = 1 AND odi.Total &gt; 0 ) )

) a

GROUP BY a.Category
       , a.CategoryId
       , a.DepartmentId</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IkRlcGFydG1lbnRzTG9va3VwIj48RmllbGQgTmFtZT0iSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjwvVmlldz48VmlldyBOYW1lPSJRdWVyeSI+PEZpZWxkIE5hbWU9IkNhdGVnb3J5IiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkNhdGVnb3J5SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJEZXBhcnRtZW50SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQcmljZSIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IlJldFF0eSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJSZXRUb3RhbCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iUmV0TmV0IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDb3BsUXR5IiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IkNvcGxUb3RhbCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29wbE5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iUXR5IiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IlRvdGFsIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJOZXQiIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjwvRGF0YVNldD4=</value>
  </data>
</root>