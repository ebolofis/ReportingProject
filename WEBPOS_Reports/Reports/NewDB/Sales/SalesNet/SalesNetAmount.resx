<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>SELECT prime.Department, prime.DepartmentId,
     ISNULL(prime.Category,'') Category,
     ISNULL(prime.ProductCategoryDescrtiption,'') ProductCategoryDescrtiption,
     ISNULL(prime.ProductCode,'') ProductCode,  ProductDescription, MAX(Price) Price,	
     CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(QTY)ELSE 0 END RetQTY,
     CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(Total)ELSE 0 END RetTotal,
     CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(Net)ELSE 0 END RetNet,
     CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(QTY)ELSE 0 END CoplQTY,
     CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(Total)ELSE 0 END CoplTotal,
     CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(Net)ELSE 0 END CorplNet, 
     CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(QTY)ELSE 0 END QTY,
     CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(Total)ELSE 0 END Total,
     CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(Net)ELSE 0 END Net  
FROM (
  SELECT ProductDescription, ProductCode, ProductCategoryDescrtiption, t.Category,
    Net,qty, Total, t.IsVoided, t.InvoiceType, t.Department, t.Price, t.DepartmentId 
  FROM (
    SELECT 
      DepartmentId = pi.DepartmentId,
      Department = d.[Description],
      Category = c.[Description],
      ProductCode = max(Case IsExtra when 0 then p.Code else ing.Code end),
      ProductDescription = max(Case IsExtra when 0 then p.SalesDescription else ing.SalesDescription end),
      ProductCategoryCode = pc.Code,
      ProductCategoryDescrtiption = pc.Description,
      Qty = Sum(odi.Qty),
      Total = sum(odi.Total),
      Net = Sum(odi.Net),
      InvoiceType = odi.InvoiceType,
      IsVoided = ISNULL(i.IsVoided,0),
      MAX(odi.Price) Price
    FROM OrderDetailInvoices_View odi 
      INNER JOIN Invoices_View i on odi.InvoicesId = i.id 
    LEFT OUTER JOIN ProductCategories pc on odi.productCategoryId = pc.Id
      LEFT OUTER JOIN EndOfDay_View eod on i.EndofDayId = eod.Id
      LEFT OUTER JOIN PosInfo pi on i.PosInfoId = pi.Id
      LEFT OUTER JOIN Department d on pi.DepartmentId = d.Id
      LEFT OUTER JOIN Product p on p.id = odi.productid and isextra = 0
      LEFT OUTER JOIN Ingredients ing on ing.Id = odi.productid and isextra = 1
      LEFT OUTER JOIN Categories c ON c.Id = pc.CategoryId
    WHERE IsNull(i.IsDeleted, 0) = 0 and IsNull(odi.IsDeleted, 0) = 0 and InvoiceType not in (2,3,8)
       and IsNull(eod.FODay, CAST(getdate() AS DATE)) BETWEEN @FromDate AND @ToDate
      GROUP BY pi.DepartmentId, pc.Code, pc.Description, odi.InvoiceType,	i.IsVoided, d.[Description], c.[Description] 
   ) t
) prime
GROUP BY prime.Department, prime.Category, prime.ProductCategoryDescrtiption, 
  ProductCode , ProductDescription, prime.IsVoided, prime.InvoiceType, prime.DepartmentId</value>
  </data>
  <data name="customSqlQuery2.Sql" xml:space="preserve">
    <value>SELECT a.Category Category,
       a.DepartmentId,
       0 Price,
       SUM(a.RetQty) RetQty,
       SUM(a.RetTotal) RetTotal,
       SUM(a.RetNet) RetNet,
       SUM(a.CoplQty) CoplQty,
       SUM(a.CoplTotal) CoplTotal,
       SUM(A.CoplNet) CoplNet,
       SUM(a.Qty) Qty,
       SUM(a.Total) Total,
       SUM(a.Net) Net
       
FROM (
      SELECT DepartmentId = pif.DepartmentId,
             CategoryId = ISNULL(c.Id,-1), 
             Category = ISNULL(c.[Description],'No Category'),
             CASE WHEN IsVoided &lt;&gt; 0 THEN odi.QTY ELSE 0 END RetQty,
             CASE WHEN IsVoided &lt;&gt; 0 THEN odi.Total ELSE 0 END RetTotal,
             CASE WHEN IsVoided &lt;&gt; 0 THEN odi.Net ELSE 0 END RetNet,
             CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN odi.QTY ELSE 0 END CoplQty,
             CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN odi.Total ELSE 0 END CoplTotal,
             CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN odi.Net ELSE 0 END CoplNet,
             CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN odi.Qty  ELSE 0 END Qty,
             CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN odi.Total ELSE 0 END Total,
             CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN odi.Net ELSE 0 END Net 
             
      FROM OrderDetailInvoices_View odi 
           INNER JOIN Invoices_View i on odi.InvoicesId = i.id 
           INNER JOIN PosInfo pif ON pif.Id = i.PosInfoId AND pif.DepartmentId = @DepartmentId
           LEFT OUTER JOIN ProductCategories pc on odi.productCategoryId = pc.Id
           LEFT OUTER JOIN Categories c ON c.Id = pc.CategoryId
           LEFT OUTER JOIN EndOfDay_View eod on i.EndofDayId = eod.Id
           
      WHERE IsNull(i.IsDeleted, 0) = 0 and
            IsNull(odi.IsDeleted, 0) = 0 and
            InvoiceType not in (2,3,8) and
            IsNull(eod.FODay, CAST(getdate() AS DATE)) BETWEEN @FromDate AND @ToDate 
     ) a
     
GROUP BY a.Category,
         a.DepartmentId</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iRGVwYXJ0bWVudCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJEZXBhcnRtZW50SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJDYXRlZ29yeSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQcm9kdWN0Q2F0ZWdvcnlEZXNjcnRpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJvZHVjdENvZGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJvZHVjdERlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlByaWNlIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJSZXRRVFkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iUmV0VG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlJldE5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29wbFFUWSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJDb3BsVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNvcnBsTmV0IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJRVFkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ik5ldCIgVHlwZT0iRGVjaW1hbCIgLz48L1ZpZXc+PFZpZXcgTmFtZT0iU3VuUmVwUXVlcnkiPjxGaWVsZCBOYW1lPSJDYXRlZ29yeSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJEZXBhcnRtZW50SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQcmljZSIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IlJldFF0eSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJSZXRUb3RhbCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iUmV0TmV0IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJDb3BsUXR5IiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IkNvcGxUb3RhbCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29wbE5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iUXR5IiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IlRvdGFsIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJOZXQiIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjwvRGF0YVNldD4=</value>
  </data>
  <metadata name="sqlDataSource2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 56</value>
  </metadata>
  <data name="customSqlQuery3.Sql" xml:space="preserve">
    <value>SELECT prime.Department, prime.ProductCategoryDescrtiption, prime.ProductCode, prime.ProductDescription,
  Max(Price) Price, 
  CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(QTY)ELSE 0 END RetQTY,
  CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(Total)ELSE 0 END RetTotal,
  CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(Net)ELSE 0 END RetNet,
  CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(QTY)ELSE 0 END CoplQTY,
  CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(Total)ELSE 0 END CoplTotal,
  CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(Net)ELSE 0 END CorplNet, 
  CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(QTY)ELSE 0 END QTY,
  CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(Total)ELSE 0 END Total,
  CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(Net)ELSE 0 END Net  
FROM (
  select 
      DepartmentId = pi.DepartmentId,
      Department = d.[Description],
      ProductCode = pr.Code,
      ProductDescription = pr.SalesDescription,
      ProductCategoryCode = pc.Code,
      ProductCategoryDescrtiption = pc.Description,
      Qty = Sum(od.Qty),
      Total = sum(od.TotalAfterDiscount),
      Net = Sum(odva.Net),
      InvoiceType = it.[Type],
      IsVoided = ISNULL(i.IsVoided,0),
      MAX(od.Price) Price
  from OrderDetailInvoices odi
  join Invoices i on i.Id = odi.InvoicesId
  join InvoiceTypes it on it.Id = i.InvoiceTypeId
  join PosInfo pi on pi.Id = i.PosInfoId
  left outer join Department d on d.Id = pi.DepartmentId
  join OrderDetail od on od.Id = odi.OrderDetailId
  join Product pr on pr.Id = od.ProductId
  join OrderDetailVatAnal odva on odi.OrderDetailId = odva.OrderDetailId
  join Vat v on v.Id = odva.VatId
  left outer join EndOfDay eod on eod.Id = i.EndOfDayId
  left outer join ProductCategories pc on pc.Id = pr.ProductCategoryId
  where  IsNull(eod.FODay, CAST(getdate() AS DATE)) between @FromDate and @ToDate 
       and IsNull(i.IsDeleted, 0) = 0 and IsNull(od.IsDeleted, 0) = 0 and it.Type not in (2,8)
  GROUP BY PI.DepartmentId, d.[Description], pr.Code, pr.SalesDescription, pc.Code, pc.[Description], it.[Type], i.IsVoided
  union all
  select 
      DepartmentId = pi.DepartmentId,
      Department = d.[Description],
      ProductCode = ing.Code,
      ProductDescription = ing.SalesDescription,
      ProductCategoryCode = pc.Code,
      ProductCategoryDescrtiption = pc.Description,
      Qty = Sum(oding.Qty),
      Total = sum(oding.TotalAfterDiscount),
      Net = Sum(odva.Net),
      InvoiceType = it.[Type],
      IsVoided = ISNULL(i.IsVoided,0),
      MAX(oding.Price) Price
  from OrderDetailInvoices odi
  join OrderDetailIgredients oding on oding.OrderDetailId = odi.OrderDetailId
  join Invoices i on i.Id = odi.InvoicesId
  join InvoiceTypes it on it.Id = i.InvoiceTypeId
  join PosInfo pi on pi.Id = i.PosInfoId
  left outer join Department d on d.Id = pi.DepartmentId
  join OrderDetail od on od.Id = odi.OrderDetailId
  join Product pr on pr.Id = od.ProductId
  join Ingredients ing on ing.Id = oding.IngredientId
  join OrderDetailIgredientVatAnal odva on oding.Id = odva.OrderDetailIgredientsId
  join Vat v on v.Id = odva.VatId
  left outer join EndOfDay eod on eod.Id = i.EndOfDayId
  left outer join ProductCategories pc on pc.Id = pr.ProductCategoryId
  where  IsNull(eod.FODay, CAST(getdate() AS DATE)) between @FromDate and @ToDate 
  GROUP BY PI.DepartmentId, d.[Description], ing.Code, ing.SalesDescription, pc.Code, pc.[Description], it.[Type], i.IsVoided
) prime
GROUP BY ProductCode, ProductDescription, prime.Department, prime.ProductCategoryDescrtiption, prime.IsVoided,
  prime.InvoiceType</value>
  </data>
  <data name="customSqlQuery4.Sql" xml:space="preserve">
    <value>SELECT CategoryId, Category,0 Price, 
  CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(QTY)ELSE 0 END RetQTY,
  CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(Total)ELSE 0 END RetTotal,
  CASE WHEN IsVoided &lt;&gt; 0 THEN SUM(Net)ELSE 0 END RetNet,
  CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(QTY)ELSE 0 END CoplQTY,
  CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(Total)ELSE 0 END CoplTotal,
  CASE WHEN IsVoided = 0 AND InvoiceType = 4 THEN SUM(Net)ELSE 0 END CorplNet, 
  CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(QTY)ELSE 0 END QTY,
  CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(Total)ELSE 0 END Total,
  CASE WHEN IsVoided = 0 AND InvoiceType != 4 THEN SUM(Net)ELSE 0 END Net  
FROM (
  select 
    CategoryId = ISNULL(c.Id,-1)
    ,Category = ISNULL(c.[Description],'No Category')
    ,Qty = Sum(od.Qty),
    Total = sum(od.TotalAfterDiscount),
    Net = Sum(odva.Net),
    InvoiceType = it.[Type],
    IsVoided = ISNULL(i.IsVoided,0),
    0 Price
  from OrderDetailInvoices odi
  join Invoices i on i.Id = odi.InvoicesId
  join InvoiceTypes it on it.Id = i.InvoiceTypeId
  join PosInfo pi on pi.Id = i.PosInfoId
  left outer join Department d on d.Id = pi.DepartmentId
  join OrderDetail od on od.Id = odi.OrderDetailId
  join Product pr on pr.Id = od.ProductId
  join OrderDetailVatAnal odva on odi.OrderDetailId = odva.OrderDetailId
  join Vat v on v.Id = odva.VatId
  left outer join EndOfDay eod on eod.Id = i.EndOfDayId
  left outer join ProductCategories pc on pc.Id = pr.ProductCategoryId
  left outer join Categories c on pc.Categoryid = c.Id
  where  IsNull(eod.FODay, CAST(getdate() AS DATE)) between @FromDate and @ToDate 
       and IsNull(i.IsDeleted, 0) = 0 and IsNull(od.IsDeleted, 0) = 0 and it.Type not in (2,8)
  GROUP BY c.Id, c.[Description], it.[Type], i.IsVoided
  union all
  select 
    CategoryId = ISNULL(c.Id,-1)
    ,Category = ISNULL(c.[Description],'No Category')
    ,Qty = Sum(oding.Qty),
    Total = sum(oding.TotalAfterDiscount),
    Net = Sum(odva.Net),
    InvoiceType = it.[Type],
    IsVoided = ISNULL(i.IsVoided,0),
    0 Price
  from OrderDetailInvoices odi
  join OrderDetailIgredients oding on oding.OrderDetailId = odi.OrderDetailId
  join Invoices i on i.Id = odi.InvoicesId
  join InvoiceTypes it on it.Id = i.InvoiceTypeId
  join PosInfo pi on pi.Id = i.PosInfoId
  left outer join Department d on d.Id = pi.DepartmentId
  join OrderDetail od on od.Id = odi.OrderDetailId
  join Product pr on pr.Id = od.ProductId
  join Ingredients ing on ing.Id = oding.IngredientId
  join OrderDetailIgredientVatAnal odva on oding.Id = odva.OrderDetailIgredientsId
  join Vat v on v.Id = odva.VatId
  left outer join EndOfDay eod on eod.Id = i.EndOfDayId
  left outer join ProductCategories pc on pc.Id = pr.ProductCategoryId
  left outer join Categories c on pc.Categoryid = c.Id
  where  IsNull(eod.FODay, CAST(getdate() AS DATE)) between @FromDate and @ToDate 
  GROUP BY c.Id, c.[Description], it.[Type], i.IsVoided
) prime
GROUP BY CategoryId, Category, prime.IsVoided, prime.InvoiceType</value>
  </data>
  <data name="sqlDataSource2.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTIiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iRGVwYXJ0bWVudCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQcm9kdWN0Q2F0ZWdvcnlEZXNjcnRpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJvZHVjdENvZGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJvZHVjdERlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlByaWNlIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJSZXRRVFkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iUmV0VG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlJldE5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29wbFFUWSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJDb3BsVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNvcnBsTmV0IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJRVFkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ik5ldCIgVHlwZT0iRGVjaW1hbCIgLz48L1ZpZXc+PFZpZXcgTmFtZT0iU3VuUmVwUXVlcnkiPjxGaWVsZCBOYW1lPSJDYXRlZ29yeUlkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iQ2F0ZWdvcnkiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJpY2UiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJSZXRRVFkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iUmV0VG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlJldE5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iQ29wbFFUWSIgVHlwZT0iRG91YmxlIiAvPjxGaWVsZCBOYW1lPSJDb3BsVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IkNvcnBsTmV0IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJRVFkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ik5ldCIgVHlwZT0iRGVjaW1hbCIgLz48L1ZpZXc+PC9EYXRhU2V0Pg==</value>
  </data>
</root>