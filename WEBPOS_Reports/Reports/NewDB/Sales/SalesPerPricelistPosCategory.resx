<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>-- select OBJECT_NAME(object_id),* from sys.columns where name='hotelid'
-- select OBJECT_NAME(object_id),* from sys.columns where name='ItemCode'

-------------------------------------------------------------------
--       Πωλήσεις Ειδών ανά Τιμοκατάλογο / Κατηγορία / POS       --
-- ( περιλαμβάνει υπολογισμό και αποφορολόγηση Δημοτικού Φόρου ) --
-------------------------------------------------------------------

-- Declare @FromDate datetime = '2016-05-01', @ToDate datetime = '2017-02-14'

-- Select Total = SUM(Total) From (

Select ProductId, ProductCode, ProductDescription
     , FODay
     , PricelistId, PricelistDescription
     , CategoryId, CategoryDescription
     , PosInfoId, PosInfoDescription
     , InvoiceCount = Count( distinct InvoiceId )
     , Qty = SUM( Qty )
     , Net = SUM( Net ), NetNoTax = SUM( NetNoTax ), Total = SUM( Total ), VatAmount = SUM( VatAmount )
     -- , MINPrice = MIN( Price )
     -- , MAXPrice = MAX( Price )

From (

Select ProductId, ProductCode, ProductDescription
     , ProductCategoryCode, ProductCategoryDescrtiption
     , CategoryId, CategoryDescription
     , PricelistCode, PricelistDescription
     , InvoiceId
     , InvoiceTotal
     -- , Abbreviation
     , ReceiptNo
     , Cover
     , qty
     , Price
     , Net, NetNoTax, Total, VatAmount
     , FODay
     , IsExtra
     , PricelistId
     , PosInfoId, PosInfoDescription 
     -- , InvoiceUsed = Count( distinct InvoiceId )

From (

Select PosInfoId = inv.PosInfoId, PosInfoDescription = pif.Description
     -- , DepartmentId = pi.DepartmentId, DepartmentDescription = d.Description
     , ProductId = odi.ProductId, ProductCode = MAX( Case IsExtra when 0 then p.Code else ing.Code end )
     , ProductDescription = MAX( Case IsExtra when 0 then p.SalesDescription else ing.SalesDescription end )
     , ProductCategoryCode = pc.Code, ProductCategoryDescrtiption = pc.Description
     , CategoryId = cat.Id, CategoryDescription = cat.Description
     , Qty = SUM( odi.Qty )
     , Price = SUM( odi.Price)
     , Discount = SUM( odi.Discount )
     , Net = SUM( odi.Net )
     , NetNoTax = SUM( tax_calc.NetNoTax )
     , Total = SUM( odi.Total )
     , VatAmount = SUM( odi.VatAmount ), VatPercentage = MAX( v.Percentage )
     , PricelistId = pl.Id, PricelistCode = pl.Code, PricelistDescription = pl.Description
     , VatId = odi.VatId
     , InvoiceTotal = inv.Total
     -- , InvoiceType = odi.InvoiceType
     -- , Abbreviation = odi.Abbreviation
     , ReceiptNo = odi.Counter
     , InvoiceId = inv.Id
     , Cover = inv.Cover
     , Rooms = inv.Rooms
     , SalesTypeId = odi.SalesTypeId, SalesTypeDescription = st.Description
     -- , StaffCode = s.Code, StafName = s.LastName + ' ' + s.FirstName
     -- , FODay = ISNULL( eod.FODay, CAST( getdate() AS DATE ) )
     , TempFODay = ISNULL( eod.FODay, CAST( getdate() AS DATE ) )
     , FODay = @FromDate
     , NotAudited = ISNULL( inv.EndOfDayId, 0 )
     , IsExtra = odi.IsExtra

From OrderDetailInvoices_View AS odi 
     JOIN Invoices_View AS inv on odi.InvoicesId = inv.id AND ISNULL( inv.IsVoided,0 ) = 0
     LEFT OUTER JOIN Product AS p on p.id = odi.productid AND isextra = 0
     LEFT JOIN ProductCategories AS pc on pc.Id = CASE odi.IsExtra
                                                  WHEN 1 THEN odi.productCategoryId
                                                  ELSE p.ProductCategoryId END
     LEFT JOIN Categories AS cat on pc.CategoryId = cat.Id
     LEFT JOIN EndOfDay_View AS eod on inv.EndofDayId = eod.Id
     LEFT JOIN Pricelist AS pl on odi.pricelistid = pl.id
     LEFT JOIN vat AS v on odi.vatId = v.Id
     LEFT JOIN SalesType AS st on st.Id = odi.SalesTypeId
     -- LEFT JOIN Staff AS stf on i.StaffId = stf.id
     LEFT OUTER JOIN PosInfo pif on inv.PosInfoId = pif.Id
     -- LEFT OUTER JOIN Department d on pif.DepartmentId = d.Id
     LEFT OUTER JOIN Ingredients ing on ing.Id = odi.productid AND IsExtra = 1
     OUTER APPLY (

         SELECT TOP 1 NetNoTax = odi.Net * ( 100 - CASE
                                                   WHEN odi.OrderDetailIgredientsId IS NOT NULL
                                                   THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                                   ELSE ISNULL( prclst.TaxPercentage, 0 )
                                                   END ) / 100
              , TaxPercentage = CASE
                                WHEN odi.OrderDetailIgredientsId IS NOT NULL
                                THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                ELSE ISNULL( prclst.TaxPercentage, 0 )
                                END
               --ISNULL(pd_a.TaxPercentage, pd_ing.TaxPercentage) TaxPercentage
             , odi.ProductId
             , odi.OrderDetailIgredientsId
             , odi.PricelistId
             , odi.Net
             , InvoiceId = odi.InvoicesId
             , Percentage = ( 100 - CASE
                                    WHEN odi.OrderDetailIgredientsId IS NOT NULL
                                    THEN ISNULL( pd_ing.TaxPercentage, 0 )
                                    ELSE ISNULL( prclst.TaxPercentage, 0 )
                                    END )

         FROM OrderDetailInvoices_View AS odi1
              LEFT OUTER JOIN (
                              SELECT Id, IngredientId
                              FROM OrderDetailIgredients_View
                              ) AS oding ON odi1.OrderDetailIgredientsId = oding.Id AND odi1.OrderDetailIgredientsId IS NOT NULL
              OUTER APPLY (
                          SELECT PricelistId = pd.PricelistId
                               , ProductId = pd.ProductId
                               , IngredientId = pd.IngredientId
                               , TaxPercentage = tx.Percentage
                          FROM PricelistDetail AS pd
                               LEFT OUTER JOIN Tax AS tx ON pd.TaxId = tx.Id
                          WHERE pd.PricelistId = odi1.PricelistId
                                AND CAST( pd.ProductId AS VARCHAR( 100 ) ) = CASE
                                                                             WHEN odi1.ProductId IS NULL
                                                                             THEN 'dfsdgfasd'
                                                                             ELSE CAST(odi1.ProductId AS VARCHAR(100))
                                                                             END
                          ) AS prclst
              OUTER APPLY (
                          SELECT PricelistId = pd.PricelistId
                               , ProductId = pd.ProductId
                               , IngredientId = pd.IngredientId
                               , TaxPercentage = tx.Percentage
                          FROM PricelistDetail AS pd
                               LEFT OUTER JOIN Tax AS tx ON pd.TaxId = tx.Id
                          WHERE pd.PricelistId = odi1.PricelistId
                                AND CAST( pd.IngredientId AS VARCHAR( 100 ) ) = CASE
                                                                                WHEN oding.IngredientId IS NULL
                                                                                THEN 'dfsdgfasd'
                                                                                ELSE CAST(oding.IngredientId AS VARCHAR(100))
                                                                                END
                          ) AS pd_ing

          WHERE odi1.InvoicesId = odi.InvoicesId AND odi1.ProductId = odi.ProductId

     ) AS tax_calc
          
Where ISNULL( inv.IsDeleted, 0 ) = 0 AND
      ISNULL( odi.IsDeleted, 0 ) = 0 AND
      InvoiceType NOT IN ( 2, 3, 8 ) AND
      ISNULL( eod.FODay, CAST( getdate() AS DATE ) ) BETWEEN @FromDate AND @ToDate
          
Group By inv.Id
       , odi.ProductId
       , odi.[Description]
       , pc.Code
       , pc.[Description]
       , cat.Id
       , cat.[Description]
       , pl.[Description]
       , pl.Code
       , odi.VatId
       , odi.Abbreviation
       , odi.[Counter]
       , inv.Id
       , inv.Cover
       , inv.Total
       , inv.Rooms
       , odi.SalesTypeId
       , st.[Description]
       , ISNULL( eod.FODay, CAST( getdate() AS DATE ) )
       , ISNULL( inv.EndOfDayId, 0 )
       , IsExtra
       , pl.Id
       , inv.PosInfoId
       , pif.[Description]
          
   ) t

   ) prime

-- Where ProductId= 1674

Group By ProductId, ProductCode, ProductDescription
       , FODay
       , PricelistId, PricelistDescription
       , PosInfoId, PosInfoDescription
       , CategoryId, CategoryDescription
       -- , PricelistCode
       -- , PricelistDescription
       -- , InvoiceTotal
       -- , InvoiceType
       -- , Abbreviation
       -- , ReceiptNo
       -- , Cover

-- Order By InvoiceId

-- ) sum_of_totals</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IkNhdGVnb3JpZXMiPjxGaWVsZCBOYW1lPSJJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlBvc0luZm9Mb29rVXBzIj48RmllbGQgTmFtZT0iSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJDb2RlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlByaWNlbGlzdExvb2t1cHMiPjxGaWVsZCBOYW1lPSJJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iUHJvZHVjdElkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iUHJvZHVjdENvZGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJvZHVjdERlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkZPRGF5IiBUeXBlPSJEYXRlVGltZSIgLz48RmllbGQgTmFtZT0iUHJpY2VsaXN0SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQcmljZWxpc3REZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJDYXRlZ29yeUlkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iQ2F0ZWdvcnlEZXNjcmlwdGlvbiIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQb3NJbmZvSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQb3NJbmZvRGVzY3JpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iSW52b2ljZUNvdW50IiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iUXR5IiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9Ik5ldCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iTmV0Tm9UYXgiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlRvdGFsIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJWYXRBbW91bnQiIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjxWaWV3IE5hbWU9IlF1ZXJ5X0Zhc3RTdGFydCI+PEZpZWxkIE5hbWU9IklkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iSW52b2ljZVR5cGVJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkNvdW50ZXIiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJEYXkiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJJc1ByaW50ZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9Ikd1ZXN0SWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJUb3RhbCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iRGlzY291bnQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlZhdCIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iVGF4IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJOZXQiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlN0YWZmSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJDb3ZlciIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IlRhYmxlSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQb3NJbmZvSWQiIFR5cGU9IkludDY0IiAvPjxGaWVsZCBOYW1lPSJQZGFNb2R1bGVJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IkNsaWVudFBvc0lkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iRW5kT2ZEYXlJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IlBvc0luZm9EZXRhaWxJZCIgVHlwZT0iSW50NjQiIC8+PEZpZWxkIE5hbWU9IklzVm9pZGVkIiBUeXBlPSJCb29sZWFuIiAvPjxGaWVsZCBOYW1lPSJJc0RlbGV0ZWQiIFR5cGU9IkJvb2xlYW4iIC8+PEZpZWxkIE5hbWU9IkRpc2NvdW50UmVtYXJrIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlBheW1lbnRzRGVzYyIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJJc1BhaWQiIFR5cGU9IkludDE2IiAvPjxGaWVsZCBOYW1lPSJQYWlkVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9IlJvb21zIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9Ik9yZGVyTm8iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iSXNJbnZvaWNlZCIgVHlwZT0iQm9vbGVhbiIgLz48RmllbGQgTmFtZT0iSGFzaGNvZGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iVGFibGVTdW0iIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjwvRGF0YVNldD4=</value>
  </data>
  <metadata name="sqlDataSource2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 54</value>
  </metadata>
  <data name="customSqlQuery6.Sql" xml:space="preserve">
    <value>-- declare @FromDate datetime = '2016-05-29', @ToDate  datetime = '2016-05-29'


SELECT ProductId, ProductCode, ProductDescription,--, ProductCategoryCode, ProductCategoryDescrtiption, CategoryDescription,
	   PricelistId, PricelistDescription, FODay,
	   InvoiceCount = Count(distinct InvoiceId), Qty = Sum(Qty), Total = Sum(Total), MinPrice = Min(Price), 
	   MaxPrice = Max(Price), Net = Sum(Net), VatAmount = Sum(VatAmount)
FROM (


--Common section
select 
		   PosInfoId = i.PosInfoId
		  ,PosInfoDescription = pi.Description
		  ,DepartmentDescription = d.Description
		  ,DepartmentId = pi.DepartmentId
		  ,ProductId = pr.Id
		  ,ProductCode = pr.Code
		  ,ProductDescription = pr.SalesDescription
		  ,ProductCategoryCode = pc.Code
		  ,ProductCategoryDescrtiption = pc.Description
		  ,CategoryDescription = c.Description
		  ,Qty = IsNull(od.Qty,0)
		  ,Price = od.Price
		  ,Discount = od.Discount
		  ,Total = od.TotalAfterDiscount
		  ,Net = odva.Net
		  ,VatAmount = odva.VatAmount
		  ,VatPercentage = v.Percentage
		  ,PricelistDescription = pl.Description
		  ,PricelistId = pl.Id
		  ,PricelistCode = pl.Code
		  ,VatId = odva.VatId
		  ,InvoiceTotal = i.Total
		  ,InvoiceType = it.Type
		  ,Abbreviation = it.Abbreviation
		  ,ReceiptNo = i.Counter
		  ,InvoiceId = i.Id
		  ,Cover = i.Cover
		  ,Rooms = ''--i.Rooms
		  ,SalesTypeId = od.SalesTypeId
		  ,SalesTypeDescription = st.Description
		  ,StaffCode = s.Code
		  ,StafName = s.LastName + ' ' + s.FirstName
		  ,TempFODay = IsNull(eod.FODay, CAST(getdate() AS DATE))
		  ,FODay = @FromDate
		  ,NotAudited = IsNull(i.EndOfDayId, 0)
		  ,IsExtra = 0 

from OrderDetailInvoices odi
join Invoices i on i.Id = odi.InvoicesId
join InvoiceTypes it on it.Id = i.InvoiceTypeId
join PosInfo pi on pi.Id = i.PosInfoId
left outer join Department d on d.Id = pi.DepartmentId
join OrderDetail od on od.Id = odi.OrderDetailId
join Product pr on pr.Id = od.ProductId
join OrderDetailVatAnal odva on odi.OrderDetailId = odva.OrderDetailId
join Vat v on v.Id = odva.VatId
left outer join EndOfDay eod on eod.Id = i.EndOfDayId
left outer join PricelistDetail pld on pld.Id = od.PriceListDetailId
left outer join Pricelist pl on pld.PricelistId = pl.Id
join Staff s on s.Id = i.StaffId
left outer join SalesType st on st.Id = od.SalesTypeId
left outer join ProductCategories pc on pc.Id = pr.ProductCategoryId
left outer join Categories c on pc.Categoryid = c.Id
where  IsNull(eod.FODay, CAST(getdate() AS DATE)) between @FromDate and @ToDate 
	   and IsNull(i.IsDeleted, 0) = 0 and IsNull(od.IsDeleted, 0) = 0 and it.Type not in (2,8)
union all
select 
		   PosInfoId = i.PosInfoId
		  ,PosInfoDescription = pi.Description
		  ,DepartmentDescription = d.Description
		  ,DepartmentId = pi.DepartmentId
		  ,ProductId = ing.Id
		  ,ProductCode = ing.Code
		  ,ProductDescription = ing.SalesDescription
		  ,ProductCategoryCode = pc.Code
		  ,ProductCategoryDescrtiption = pc.Description
		  ,CategoryDescription = c.Description
		  ,Qty = IsNull(oding.Qty,0)
		  ,Price = oding.Price
		  ,Discount = oding.Discount
		  ,Total = oding.TotalAfterDiscount
		  ,Net = odva.Net
		  ,VatAmount = odva.VatAmount
		  ,VatPercentage = v.Percentage
		  ,PricelistDescription = pl.Description
		  ,PricelistId = pl.Id
		  ,PricelistCode = pl.Code
		  ,VatId = odva.VatId
		  ,InvoiceTotal = i.Total
		  ,InvoiceType = it.Type
		  ,Abbreviation = it.Abbreviation
		  ,ReceiptNo = i.Counter
		  ,InvoiceId = i.Id
		  ,Cover = i.Cover
		  ,Rooms = ''--i.Rooms
		  ,SalesTypeId = od.SalesTypeId
		  ,SalesTypeDescription = st.Description
		  ,StaffCode = s.Code
		  ,StafName = s.LastName + ' ' + s.FirstName
		  ,TempFODay = IsNull(eod.FODay, CAST(getdate() AS DATE))
		  ,FODay = @FromDate
		  ,NotAudited = IsNull(i.EndOfDayId, 0)
		  ,IsExtra = 1 

from OrderDetailInvoices odi
join OrderDetailIgredients oding on oding.OrderDetailId = odi.OrderDetailId
join Invoices i on i.Id = odi.InvoicesId
join InvoiceTypes it on it.Id = i.InvoiceTypeId
join PosInfo pi on pi.Id = i.PosInfoId
left outer join Department d on d.Id = pi.DepartmentId
join OrderDetail od on od.Id = odi.OrderDetailId
join Product pr on pr.Id = od.ProductId
join Ingredients ing on ing.Id = oding.IngredientId
join OrderDetailIgredientVatAnal odva on oding.Id = odva.OrderDetailIgredientsId
join Vat v on v.Id = odva.VatId
left outer join EndOfDay eod on eod.Id = i.EndOfDayId
left outer join PricelistDetail pld on pld.Id = oding.PriceListDetailId
left outer join Pricelist pl on pld.PricelistId = pl.Id
join Staff s on s.Id = i.StaffId
left outer join SalesType st on st.Id = od.SalesTypeId
left outer join ProductCategories pc on pc.Id = pr.ProductCategoryId
left outer join Categories c on pc.Categoryid = c.Id
where  IsNull(eod.FODay, CAST(getdate() AS DATE)) between @FromDate and @ToDate 
  --and IsNull(i.IsDeleted, 0) = 0 and IsNull(oding.IsDeleted, 0) = 0 and it.Type not in (2,8)
-- Common Section Ends


) prime
--WHERE ISNULL(prime.FODay, CAST(GETDATE() AS DATE)) BETWEEN CAST(@FromDate AS DATE) AND CAST(@ToDate AS DATE)
--where IsExtra = 1
GROUP BY ProductId, ProductCode, ProductDescription --, ProductCategoryCode, ProductCategoryDescrtiption, CategoryDescription, 
			, PricelistId, PricelistDescription, FODay
 order by PricelistId, ProductDescription</value>
  </data>
  <data name="sqlDataSource2.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTIiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iUHJvZHVjdElkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iUHJvZHVjdENvZGUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJvZHVjdERlc2NyaXB0aW9uIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlByaWNlbGlzdElkIiBUeXBlPSJJbnQ2NCIgLz48RmllbGQgTmFtZT0iUHJpY2VsaXN0RGVzY3JpcHRpb24iIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRk9EYXkiIFR5cGU9IkRhdGVUaW1lIiAvPjxGaWVsZCBOYW1lPSJJbnZvaWNlQ291bnQiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJRdHkiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVG90YWwiIFR5cGU9IkRlY2ltYWwiIC8+PEZpZWxkIE5hbWU9Ik1pblByaWNlIiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJNYXhQcmljZSIgVHlwZT0iRGVjaW1hbCIgLz48RmllbGQgTmFtZT0iTmV0IiBUeXBlPSJEZWNpbWFsIiAvPjxGaWVsZCBOYW1lPSJWYXRBbW91bnQiIFR5cGU9IkRlY2ltYWwiIC8+PC9WaWV3PjwvRGF0YVNldD4=</value>
  </data>
</root>